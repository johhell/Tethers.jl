#!/bin/bash -eu
if [[ $(basename $(pwd)) == "bin" ]]; then
    cd ..
fi

if ! command -v juliaup &> /dev/null; then
    echo "Please install the Julia installer 'juliaup'!"
    echo "See: https://github.com/JuliaLang/juliaup"
    exit 1
fi

juliaup add 1.10
juliaup default 1.10

export KMP_DUPLICATE_LIB_OK=TRUE
export MPLBACKEND=qt5agg
export PYTHON=""

# total memory in kB
MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')

if (( $MEM <  15000000 )); then
    sudo /bin/bash -c "echo '1' | tee -a /proc/sys/vm/overcommit_memory"
    sudo systemctl disable --now systemd-oomd
    export JULIA_IMAGE_THREADS=1
    export JULIA_PKG_PRESERVE_TIERED_INSTALLED=true
fi

julia_version=$(julia --version | awk '{print($3)}')
julia_major=${julia_version:0:3} 
if [[ $julia_major == "1.1" ]]; then
    julia_major=${julia_version:0:4} 
fi
if test -f "kps-image-${julia_major}.so"; then
    mv bin/kps-image-${julia_major}.so bin/kps-image-${julia_major}.so.bak
fi

echo "Updating packages..."
if test -f "Manifest.toml"; then
   rm Manifest.toml
fi
julia --pkgimages=no --project -e "using Pkg; Pkg.add(\"PyCall\"); Pkg.build(\"PyCall\")"
julia --pkgimages=no --project -e "using Pkg; Pkg.add(\"Conda\"); using Conda; Conda.add(\"matplotlib\")"
julia --pkgimages=no --project -e "using PyPlot"
julia --pkgimages=no --project -e "include(\"./test/update_packages.jl\");"

julia --pkgimages=no --project -t auto -e "using Pkg; Pkg.precompile()"
julia --pkgimages=no --project -t auto --gcthreads=4,1 -e "include(\"./test/create_sys_image.jl\");"

mv kps-image_tmp.so bin/kps-image-${julia_major}.so
